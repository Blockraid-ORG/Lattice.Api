generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FileStorage {
  LOCAL
  AWS
  GCS
  DOSpaces
}

enum EnumUserCategory {
  UNSIGNED
  PERSONAL
  CORPORATE
}

enum EnumUserType {
  INTERNAL
  PUBLIC
  PROJECT_OWNER
}

enum ProjectStatus {
  PENDING
  APPROVED
  REJECTED
  DEPLOYED
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum FrequencyCategory {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum EnumProjectStatus {
  PENDING
  APPROVED
  REJECTED
  DEPLOYED
}

enum ChianType {
  Mainet
  Testnet
}

model User {
  id            String           @id @default(uuid())
  fullname      String           @db.VarChar(100)
  email         String?          @db.VarChar(100)
  password      String?
  refreshToken  String?
  status        Boolean          @default(true)
  category      EnumUserCategory @default(UNSIGNED)
  type          EnumUserType     @default(PUBLIC)
  walletAddress String?          @db.VarChar(128)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  roles    UserRole[]
  projects Project[]

  @@index([email, walletAddress])
  @@map("users")
}

model Role {
  id   String @id @default(uuid())
  name String @db.VarChar(128)
  code String @db.VarChar(64)

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  users       UserRole[]
  permissions RolePermission[]
  menus       RoleMenu[]

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("roles")
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("user_roles")
}

model Permission {
  id     String           @id @default(uuid())
  name   String           @db.VarChar(128)
  code   String           @unique() @db.VarChar(64)
  method String           @db.VarChar(64)
  path   String           @db.VarChar(128)
  roles  RolePermission[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("permissions")
}

model RolePermission {
  permissionId String
  roleId       String

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model Menu {
  id        String     @id @default(uuid())
  title     String
  isGroup   Boolean?   @default(false)
  icon      String?
  path      String?
  parentId  String?
  order     Int        @default(1)
  parent    Menu?      @relation("MenuToSubmenu", fields: [parentId], references: [id])
  children  Menu[]     @relation("MenuToSubmenu")
  roles     RoleMenu[] // many-to-many
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("menus")
}

model RoleMenu {
  roleId String
  menuId String

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@id([roleId, menuId]) // composite key
  @@map("role_menus")
}

model FileLog {
  id           String      @id @default(uuid())
  originalname String
  filename     String
  path         String
  mimetype     String
  size         Int
  storage      FileStorage @default(LOCAL)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("file_logs")
}

// Project Here...
// MASTER
model Category {
  id             String            @id @default(uuid())
  name           String            @db.VarChar(128)
  description    String
  isParent       Boolean?          @default(false)
  icon           String?
  parentId       String?
  order          Int               @default(1)
  frequency      FrequencyCategory
  frequencyCount Int               @default(1)
  targetYield    String

  parent    Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToSubcategory")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?
  projects  Project[]

  @@map("categories")
}

model Social {
  id   String  @id @default(uuid())
  name String
  icon String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("socials")
}

model Verification {
  id                       String           @id @default(uuid())
  name                     String           @db.VarChar(100)
  type                     EnumUserCategory
  IDCardRequired           Boolean
  SelfieRequired           Boolean
  BussinessLicenseRequired Boolean          @default(false)
  TaxIdRequired            Boolean          @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("verifications")
}

model Chain {
  id         String    @id @default(uuid())
  name       String    @db.VarChar(32)
  ticker     String    @db.VarChar(8)
  logo       String?
  urlScanner String?
  type       ChianType

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?
  projects  ProjectChain[]

  @@map("chains")
}

model Project {
  id          String            @id @default(uuid())
  name        String            @db.VarChar(128)
  slug        String            @db.VarChar(128)
  logo        String
  banner      String?
  ticker      String?
  decimals    Int               @default(18)
  totalSupply Decimal           @db.Decimal(65, 18)
  detail      String            @db.Text()
  status      EnumProjectStatus
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  categoryId  String
  category    Category          @relation(fields: [categoryId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy   String?
  updatedBy   String?
  deletedBy   String?
  chains      ProjectChain[]
  allocations ProjectAllocation[]
  reviewLogs  ProjectReviewLog[]

  @@map("projects")
}

model ProjectChain {
  projectId String
  chainId   String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  chain   Chain   @relation(fields: [chainId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@id([projectId, chainId])
  @@map("project_chains")
}

model ProjectAllocation {
  id        String   @id @default(uuid())
  projectId String   @unique
  name      String   @db.VarChar(128)
  supply    Int
  vesting   Int
  startDate DateTime
  isPresale Boolean  @default(false)

  project Project @relation(fields: [projectId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("project_allocations")
}

// ReviewProjectLog
model ProjectReviewLog {
  id        String        @id @default(uuid())
  projectId String
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  status    ProjectStatus

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("project_review_logs")
}

// Presales
// TransactionPresales

// ProjectOwnerVerification
// ReviewVerificationLog

// Project Here...
